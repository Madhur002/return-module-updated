import React from "react";
import { Box, Typography, Accordion, AccordionSummary, AccordionDetails } from "@mui/material";
import MonthYearPicker from "./MonthYearPicker";

const MonthYearDropdown = ({
    selectedMonth,
    selectedYear,
    setSelectedMonth,
    setYear,
    onMonthChange,
    onYearChange,
}) => {
    // Get display text for selected month/year
    const getDisplayText = () => {
        if (selectedMonth !== undefined && selectedYear) {
            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            return `${months[selectedMonth]} ${selectedYear}`;
        }
        return "Select Month-Year";
    };

    const displayText = getDisplayText();

    return (
        <Box sx={{ width: "100%" }}>
            <Accordion
                elevation={0}
                sx={{
                    border: "1px solid",
                    borderColor: (theme) => theme.palette.custom?.background1 || "#e0e0e0",
                    borderRadius: "8px !important",
                    backgroundColor: "white",
                    "&:before": {
                        display: "none",
                    },
                    "&.Mui-expanded": {
                        margin: 0,
                    },
                }}
            >
                <AccordionSummary
                    expandIcon={
                        <Box
                            component="div"
                            sx={{
                                width: 0,
                                height: 0,
                                borderLeft: "5px solid transparent",
                                borderRight: "5px solid transparent",
                                borderTop: "5px solid #757575",
                                transition: "transform 0.2s ease-in-out",
                            }}
                        />
                    }
                    sx={{
                        minHeight: "30px !important",
                        height: "30px",
                        padding: "0 12px",
                        borderRadius: 2,
                        "&.Mui-expanded": {
                            minHeight: "30px !important",
                        },
                        "& .MuiAccordionSummary-content": {
                            margin: 0,
                            "&.Mui-expanded": {
                                margin: 0,
                            },
                        },
                        "& .MuiAccordionSummary-expandIconWrapper": {
                            "&.Mui-expanded": {
                                transform: "rotate(180deg)",
                            },
                        },
                    }}
                >
                    <Typography
                        sx={{
                            color: (theme) => theme.palette.custom?.text2 || "#666",
                            fontSize: "0.7rem",
                            opacity: selectedMonth !== undefined && selectedYear ? 1 : 0.5,
                            display: "flex",
                            alignItems: "center",
                        }}
                    >
                        {displayText}
                    </Typography>
                </AccordionSummary>
                
                <AccordionDetails
                    sx={{
                        padding: 0,
                        backgroundColor: (theme) => theme.palette.custom?.paper || "white",
                        borderTop: "1px solid",
                        borderColor: (theme) => theme.palette.custom?.background1 || "#e0e0e0",
                    }}
                >
                    <MonthYearPicker
                        selectedMonth={selectedMonth}
                        selectedYear={selectedYear}
                        setSelectedMonth={(month) => {
                            setSelectedMonth(month);
                        }}
                        setYear={(year) => {
                            setYear(year);
                        }}
                        onMonthChange={(year, month) => {
                            onMonthChange?.(year, month);
                        }}
                        onYearChange={(year) => {
                            onYearChange?.(year);
                        }}
                    />
                </AccordionDetails>
            </Accordion>
        </Box>
    );
};

export default MonthYearDropdown;




import React from 'react';
import { Box, Typography, IconButton, Grid } from '@mui/material';
import { ChevronLeft, ChevronRight } from '@mui/icons-material';

const months = [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
];

const MonthYearPicker = ({
    selectedMonth,
    selectedYear,
    setSelectedMonth,
    setYear,
    onMonthChange,
    onYearChange
}) => {
    const year = selectedYear || new Date().getFullYear();
    const month = selectedMonth !== undefined ? selectedMonth : new Date().getMonth();

    const handlePrevYear = () => {
        const newYear = year - 1;
        setYear(newYear);
        if (onYearChange) {
            onYearChange(newYear);
        }
    };

    const handleNextYear = () => {
        const newYear = year + 1;
        setYear(newYear);
        if (onYearChange) {
            onYearChange(newYear);
        }
    };

    const handleMonthClick = (index) => {
        setSelectedMonth(index.toString());
        if (onMonthChange) {
            onMonthChange(year, index);
        }
    };

    return (
        <Box
            sx={{
                p: 1,
                width: "100%",
                backgroundColor: (theme) => theme.palette.custom?.paper || "white",
            }}
        >
            {/* Year Navigation Header */}
            <Box
                sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    mb: 1,
                    p: 0.5,
                }}
            >
                <IconButton
                    onClick={handlePrevYear}
                    size="small"
                    sx={{
                        minWidth: "20px",
                        width: "20px",
                        height: "20px",
                        color: (theme) => theme.palette.custom?.text2 || "#666",
                        "&:hover": {
                            backgroundColor: (theme) => theme.palette.custom?.background1 || "#f0f0f0",
                        }
                    }}
                >
                    <ChevronLeft fontSize="small" />
                </IconButton>

                <Typography
                    sx={{
                        fontWeight: 600,
                        fontSize: "0.7rem",
                        color: (theme) => theme.palette.custom?.text2 || "#666"
                    }}
                >
                    {year}
                </Typography>

                <IconButton
                    onClick={handleNextYear}
                    size="small"
                    sx={{
                        minWidth: "20px",
                        width: "20px",
                        height: "20px",
                        color: (theme) => theme.palette.custom?.text2 || "#666",
                        "&:hover": {
                            backgroundColor: (theme) => theme.palette.custom?.background1 || "#f0f0f0",
                        }
                    }}
                >
                    <ChevronRight fontSize="small" />
                </IconButton>
            </Box>

            {/* Month Grid */}
            <Grid container spacing={0.5}>
                {months.map((monthName, index) => (
                    <Grid item xs={3} key={monthName}>
                        <Box
                            onClick={() => handleMonthClick(index)}
                            sx={{
                                cursor: "pointer",
                                textAlign: "center",
                                p: 0.4,
                                borderRadius: 1,
                                backgroundColor: month === index 
                                    ? (theme) => theme.palette.custom?.background1 || "#e0e0e0"
                                    : "transparent",
                                color: (theme) => theme.palette.custom?.text2 || "#666",
                                fontSize: "0.6rem",
                                fontWeight: month === index ? 600 : 500,
                                minHeight: "20px",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                transition: "all 0.2s ease-in-out",
                                "&:hover": {
                                    backgroundColor: (theme) => theme.palette.custom?.background1 || "#f0f0f0",
                                },
                            }}
                        >
                            {monthName}
                        </Box>
                    </Grid>
                ))}
            </Grid>

            {/* Selected Date Display */}
            {month !== undefined && (
                <Box
                    sx={{
                        mt: 1,
                        backgroundColor: (theme) => theme.palette.custom?.background1 || "#f5f5f5",
                        borderRadius: 1,
                        textAlign: "center",
                        p: 0.3,
                    }}
                >
                    <Typography
                        sx={{
                            color: (theme) => theme.palette.custom?.text2 || "#666",
                            fontWeight: 500,
                            fontSize: "0.6rem",
                        }}
                    >
                        Selected: {months[month]} {year}
                    </Typography>
                </Box>
            )}
        </Box>
    );
};

export default MonthYearPicker;




import React, { useRef, useState } from "react";
import { Box, Button, TextField, Typography } from '@mui/material';
import MonthYearPicker from "./MonthYearPicker";
import { topBarSearchStyle, topBarStyle, animatedButtonStyle } from '../../../layouts/resuableComponents/styles';
import { SelectDropdown as CustomSelect } from "layouts/resuableComponents/selectDropdown";
import { Popper } from "@mui/material";
import { SearchableDropdown } from "layouts/resuableComponents/searchableDropdown";
import { departments } from "layouts/authentication/sign-up/metadata";
import MonthYearDropdown from "./MonthYearDropdown";

const ReturnTopbar = ({
    filters,
    setFilters,
    selectedMonth,
    setSelectedMonth,
    onMonthChange,
    selectedYear,
    setSelectedYear,
    onYearChange,
    onSearchChange,
    handleFilterApply,
    onClear,
    handleDownload,
    showFilters,
    setShowFilters,
}) => {
    console.log("Filters", filters);
    
    const frequencyOptions = [
        { id: 1, name: "Weekly", label: "Weekly", value: "weekly" },
        { id: 2, name: "Monthly", label: "Monthly", value: "monthly" },
        { id: 3, name: "Quarterly", label: "Quarterly", value: "quarterly" },
        { id: 4, name: "Yearly", label: "Yearly", value: "yearly" },
    ];
    
    const statusOptions = [
        { id: 5, name: "Pending", label: "Pending", value: "pending" },
        { id: 6, name: "Approved", label: "Approved", value: "approved" },
        { id: 7, name: "Rejected", label: "Rejected", value: "rejected" },
    ];

    // Convert departments to proper format
    const departmentOptions = departments.map(dept => ({
        ...dept,
        label: dept.name,
        value: dept.name.toLowerCase()
    }));

    const handleChange = (key, value) => {
        const updated = { ...filters, [key]: value };
        setFilters(updated);
        handleFilterApply(updated);
    };

    const generateYearList = () => {
        const currentYear = new Date().getFullYear();
        const years = [];
        for (let i = 0; i <= 15; i++) {
            const year = currentYear - i;
            years.push({
                value: year.toString(),
                label: year.toString()
            });
        }
        return years;
    };

    const [yearList] = useState(generateYearList());
    const [anchorEl, setAnchorEl] = useState(null);
    const [open, setOpen] = useState(false);
    
    const handleToggleFilters = (event) => {
        setAnchorEl(event.currentTarget);
        setOpen((prev) => !prev);
    };

    const handleCloseFilters = () => {
        setOpen(false);
        setAnchorEl(null);
    };

    console.log("selectedYear", selectedYear);
    console.log("selected month:", selectedMonth);

    return (
        <Box sx={{...topBarStyle, width:'100%'}}>
            <TextField
                variant="outlined"
                placeholder="Search Returns.."
                value={filters.returnText || ""}
                onChange={onSearchChange}
                sx={topBarSearchStyle}
                size="small"
            />
            <Box display="flex" gap={1} alignItems="center" ml={2}>
                <Button sx={animatedButtonStyle} onClick={handleToggleFilters}>
                    Filter
                </Button>
                <Button sx={animatedButtonStyle} onClick={handleDownload}>
                    Download
                </Button>
                <Button sx={animatedButtonStyle}>
                    Edit
                </Button>
                <Button sx={animatedButtonStyle} onClick={onClear}>
                    Clear All
                </Button>
            </Box>

            <Popper
                open={open}
                anchorEl={anchorEl}
                placement="bottom-start"
                style={{ zIndex: 1300 }}
                onClickAway={handleCloseFilters}
            >
                <Box
                    sx={{
                        display: "grid",
                        flexDirection: "column",
                        gap: 2,
                        width: "100%",
                        backgroundColor: "#fff",
                        padding: "16px",
                        borderRadius: "8px",
                        marginTop: "8px",
                        boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
                        minWidth: "280px",
                    }}
                >
                    <Box sx={{ width: "100%" }}>
                        <CustomSelect
                            label="Report Owner"
                            placeholder="Select Report Owner"
                            options={departmentOptions}
                            value={filters.ownerDepartment || ""}
                            onChange={(e) => handleChange("ownerDepartment", e.target.value)}
                        />
                    </Box>
                    <Box sx={{ width: "100%" }}>
                        <CustomSelect
                            label="Submission By"
                            placeholder="Select Submitted by"
                            options={departmentOptions}
                            value={filters.departments || ""}
                            onChange={(e) => handleChange("departments", e.target.value)}
                        />
                    </Box>
                    
                    <Box sx={{ width: "100%" }}>
                        <CustomSelect
                            label="Frequency"
                            placeholder="Select Frequency"
                            options={frequencyOptions}
                            value={filters.frequency || ""}
                            onChange={(e) => handleChange("frequency", e.target.value)}
                        />
                    </Box>
                    
                    <Box sx={{ width: "100%" }}>
                        <CustomSelect
                            label="Status"
                            placeholder="Select Status"
                            options={statusOptions}
                            value={filters.status || ""}
                            onChange={(e) => handleChange("status", e.target.value)}
                        />
                    </Box>
                    
                    <Box sx={{ width: "100%" }}>
                        <MonthYearDropdown
                            selectedMonth={selectedMonth}
                            selectedYear={selectedYear}
                            setSelectedMonth={setSelectedMonth}
                            setYear={setSelectedYear}
                            onMonthChange={(year, month) => {
                                onMonthChange(year, month);
                                handleFilterApply({...filters, month, year});
                            }}
                            onYearChange={onYearChange}
                        />
                    </Box>
                    
                    <Box sx={{ width: "100%" }}>
                        <CustomSelect
                            label="Year Filter"
                            placeholder="Select Year"
                            options={yearList}
                            value={filters.year || ""}
                            onChange={(e) => handleChange("year", e.target.value)}
                        />
                    </Box>
                </Box>
            </Popper>
        </Box>
    );
};

export default ReturnTopbar;
